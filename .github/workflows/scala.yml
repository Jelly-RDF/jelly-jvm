name: Scala build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  java_latest: 24
  java_publish: 17
  JELLY_TEST_SILENCE_OUTPUT: 'true'

jobs:
  # Run scalatest
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            java: 17
            jena_version: ""
            rdf4j_version: ""
          - os: ubuntu-latest
            java: 17
            # Jena 5.3.0 is the last version supporting RDF-star.
            # 5.4.0 dropped it in favor of RDF1.2.
            jena_version: "5.3.0"
            # Test the last RDF4J 4.x version.
            rdf4j_version: "4.3.16"
          - os: ubuntu-latest
            java: 21
            jena_version: ""
            rdf4j_version: ""
          - os: ubuntu-latest
            java: 25
            jena_version: ""
            rdf4j_version: ""
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Setup JDK
      uses: actions/setup-java@v5
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    # This is necessary, as Jena suddenly dropped support for RDF-star in 5.4.0 in favor of RDF1.2.
    # We want to keep RDF-star support a possibility, so we test against Jena 5.3 as well as the latest version.
    # See: https://github.com/Jelly-RDF/jelly-jvm/issues/368
    - name: Switch Jena and RDF4J versions
      shell: bash
      run: |
        set -e
        if [ $JENA_VERSION ]; then
          sed -i "s/lazy val jenaV = .*/lazy val jenaV = \"$JENA_VERSION\"/g" build.sbt
          grep 'lazy val jenaV' build.sbt
        fi
        if [ $RDF4J_VERSION ]; then
          sed -i "s/lazy val rdf4jV = .*/lazy val rdf4jV = \"$RDF4J_VERSION\"/g" build.sbt
          grep 'lazy val rdf4jV' build.sbt
        fi
      env:
        JENA_VERSION: ${{ matrix.jena_version }}
        RDF4J_VERSION: ${{ matrix.rdf4j_version }}

    - name: Build and test
      shell: bash
      run: sbt -v +test

  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Setup JDK
      uses: actions/setup-java@v5
      with:
        distribution: temurin
        java-version: 21 # coverage must run on an LTS version

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    - name: Build and test with coverage
      shell: bash
      run: sbt -v coverage +test coverageReport coverageAggregate jacocoAggregate

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true # This is an independent check, so it's okay to fail
        slug: Jelly-RDF/jelly-jvm
        token: ${{ secrets.CODECOV_TOKEN }}

  # Test publishing to a local repository
  test-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Setup JDK
      uses: actions/setup-java@v5
      with:
        distribution: temurin
        java-version: ${{ env.java_publish }}

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    - name: Test publishing to a local repository
      run: sbt -v +publishLocal
  
  # Test building assemblies
  test-assembly:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Setup JDK
      uses: actions/setup-java@v5
      with:
        distribution: temurin
        java-version: ${{ env.java_publish }}

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    - name: Test building assemblies
      shell: bash
      run: sbt -v +jenaPlugin/assembly +rdf4jPlugin/assembly +neo4jPlugin/assembly

    - name: Cache Jena
      id: cache-jena
      uses: actions/cache@v4
      with:
        path: jena-dir
        key: jena

    - name: Download Jena
      if: steps.cache-jena.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget --progress=dot:mega -O jena.tar.gz https://dlcdn.apache.org/jena/binaries/apache-jena-5.5.0.tar.gz
        mkdir -p jena-dir
        tar -xzf jena.tar.gz -C jena-dir --strip-components=1

    - name: Save Jena cache
      if: steps.cache-jena.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: jena-dir
        key: jena

    - name: Cache RDF4J SDK
      id: cache-rdf4j
      uses: actions/cache@v4
      with:
        path: rdf4j-dir
        key: rdf4j

    - name: Download RDF4J
      if: steps.cache-rdf4j.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget --progress=dot:mega -O rdf4j.zip https://mirrors.xmission.com/eclipse/rdf4j/eclipse-rdf4j-5.1.3-sdk.zip
        unzip -q rdf4j.zip
        mv eclipse-rdf4j-5.1.3 rdf4j-dir
        
    - name: Save RDF4J cache
      if: steps.cache-rdf4j.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: rdf4j-dir
        key: rdf4j

    - name: Test plugins
      shell: bash
      run: |
        echo '_:b <http://ex.org/p> <http://ex.org/o> .' > test.nt
        cp examples/src/main/resources/jelly/weather.jelly test.jelly

        cp -f jena-plugin/target/jelly-jena-plugin.jar jena-dir/lib
        ./jena-dir/bin/riot --stream=nt test.jelly > jena.nt
        [ -s jena.nt ] && echo Jena reading Jelly OK

        ./jena-dir/bin/riot --stream=jelly test.nt > jena.jelly
        [ -s jena.jelly ] && echo Jena writing Jelly OK

        cp -f rdf4j-plugin/target/jelly-rdf4j-plugin.jar rdf4j-dir/lib
        echo "convert test.jelly rdf4j.nt" | ./rdf4j-dir/bin/console.sh
        [ -s rdf4j.nt ] && echo RDF4J reading Jelly OK

#        # Broken because of an upstream issue
#        echo "convert test.nt rdf4j.jelly" | ./rdf4j-dir/bin/console.sh
#        [ -s rdf4j.jelly ] && echo RDF4J writing Jelly OK