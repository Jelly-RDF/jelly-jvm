
// Generated by Pekko gRPC. DO NOT EDIT.
package eu.neverblink.jelly.core.proto.v1

import org.apache.pekko
import pekko.annotation.ApiMayChange

import pekko.grpc.PekkoGrpcGenerated

/**
 * Pub/Sub service for RDF streams, to be implemented by the server.
 */
@PekkoGrpcGenerated
trait RdfStreamService {

  /**
   * Subscribe to an RDF stream.
   */
  def subscribeRdf(in: eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe): org.apache.pekko.stream.scaladsl.Source[eu.neverblink.jelly.core.proto.v1.RdfStreamFrame, org.apache.pekko.NotUsed]

  /**
   * Publish an RDF stream.
   * In case the server cannot process the stream, it must respond with
   * the INVALID_ARGUMENT error.
   */
  def publishRdf(in: org.apache.pekko.stream.scaladsl.Source[eu.neverblink.jelly.core.proto.v1.RdfStreamFrame, org.apache.pekko.NotUsed]): scala.concurrent.Future[eu.neverblink.jelly.core.proto.v1.RdfStreamReceived]

}



@PekkoGrpcGenerated
object RdfStreamService extends pekko.grpc.ServiceDescription {
  val name = "eu.neverblink.jelly.core.proto.v1.RdfStreamService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    eu.neverblink.jelly.core.proto.v1.GrpcProto.javaDescriptor;

  object Serializers {
    import pekko.grpc.scaladsl.ScalapbProtobufSerializer

    val RdfStreamSubscribeSerializer = new ScalapbProtobufSerializer(eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe.messageCompanion)

    val RdfStreamFrameSerializer = new ScalapbProtobufSerializer(eu.neverblink.jelly.core.proto.v1.RdfStreamFrame.messageCompanion)

    val RdfStreamReceivedSerializer = new ScalapbProtobufSerializer(eu.neverblink.jelly.core.proto.v1.RdfStreamReceived.messageCompanion)

  }

  @ApiMayChange
  @PekkoGrpcGenerated
  object MethodDescriptors {
    import pekko.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers.*


    val subscribeRdfDescriptor: MethodDescriptor[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe, eu.neverblink.jelly.core.proto.v1.RdfStreamFrame] =
      MethodDescriptor.newBuilder()
        .setType(


          MethodDescriptor.MethodType.SERVER_STREAMING

        )
        .setFullMethodName(MethodDescriptor.generateFullMethodName("eu.neverblink.jelly.core.proto.v1.RdfStreamService", "SubscribeRdf"))
        .setRequestMarshaller(new Marshaller(RdfStreamSubscribeSerializer))
        .setResponseMarshaller(new Marshaller(RdfStreamFrameSerializer))
        .setSampledToLocalTracing(true)
        .build()

    val publishRdfDescriptor: MethodDescriptor[eu.neverblink.jelly.core.proto.v1.RdfStreamFrame, eu.neverblink.jelly.core.proto.v1.RdfStreamReceived] =
      MethodDescriptor.newBuilder()
        .setType(

          MethodDescriptor.MethodType.CLIENT_STREAMING


        )
        .setFullMethodName(MethodDescriptor.generateFullMethodName("eu.neverblink.jelly.core.proto.v1.RdfStreamService", "PublishRdf"))
        .setRequestMarshaller(new Marshaller(RdfStreamFrameSerializer))
        .setResponseMarshaller(new Marshaller(RdfStreamReceivedSerializer))
        .setSampledToLocalTracing(true)
        .build()

  }
}
