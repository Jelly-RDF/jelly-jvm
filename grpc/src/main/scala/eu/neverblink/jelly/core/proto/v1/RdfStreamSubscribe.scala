// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package eu.neverblink.jelly.core.proto.v1

/** Subscribe command sent by the client to the server.
  *
  * @param topic
  *   The topic to which the client wants to subscribe (UTF-8 encoded).
  * @param requestedOptions
  *   Optional: the stream options requested by the client.
  *   The server should respond with a stream that matches these options.
  *   In case that is not possible, the server must respond with the
  *   INVALID_ARGUMENT error.
  */
@SerialVersionUID(0L)
final case class RdfStreamSubscribe(
    topic: _root_.scala.Predef.String = "",
    requestedOptions: _root_.scala.Option[eu.neverblink.jelly.core.proto.v1.RdfStreamOptions] = _root_.scala.None
    ) extends scalapb.GeneratedMessage {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = topic
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (requestedOptions.isDefined) {
        val __value = requestedOptions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = topic
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      requestedOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def withTopic(__v: _root_.scala.Predef.String): RdfStreamSubscribe = copy(topic = __v)
    def clearRequestedOptions: RdfStreamSubscribe = copy(requestedOptions = _root_.scala.None)
    def withRequestedOptions(__v: eu.neverblink.jelly.core.proto.v1.RdfStreamOptions): RdfStreamSubscribe = copy(requestedOptions = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = topic
          if (__t != "") __t else null
        }
        case 2 => requestedOptions.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(topic)
        case 2 => requestedOptions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe.type = eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe
    // @@protoc_insertion_point(GeneratedMessage[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe])
}

object RdfStreamSubscribe extends scalapb.GeneratedMessageCompanion[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe = {
    var __topic: _root_.scala.Predef.String = ""
    var __requestedOptions: _root_.scala.Option[eu.neverblink.jelly.core.proto.v1.RdfStreamOptions] = _root_.scala.None
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __topic = _input__.readStringRequireUtf8()
        case 18 =>
          __requestedOptions = _root_.scala.Option(__requestedOptions.fold(_root_.scalapb.LiteParser.readMessage[eu.neverblink.jelly.core.proto.v1.RdfStreamOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag => _input__.skipField(tag)
      }
    }
    eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe(
        topic = __topic,
        requestedOptions = __requestedOptions
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe(
        topic = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        requestedOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[eu.neverblink.jelly.core.proto.v1.RdfStreamOptions]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GrpcProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GrpcProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = eu.neverblink.jelly.core.proto.v1.RdfStreamOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe(
    topic = "",
    requestedOptions = _root_.scala.None
  )
  final val TOPIC_FIELD_NUMBER = 1
  final val REQUESTED_OPTIONS_FIELD_NUMBER = 2
  def of(
    topic: _root_.scala.Predef.String,
    requestedOptions: _root_.scala.Option[eu.neverblink.jelly.core.proto.v1.RdfStreamOptions]
  ): _root_.eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe = _root_.eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe(
    topic,
    requestedOptions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[eu.neverblink.jelly.core.proto.v1.RdfStreamSubscribe])
}
