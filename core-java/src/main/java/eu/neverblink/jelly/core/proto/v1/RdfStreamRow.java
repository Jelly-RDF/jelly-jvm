// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.LimitedCodedInputStream;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;

import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfStreamRow}
 */
@SuppressWarnings("hiding")
public final class RdfStreamRow extends ProtoMessage<RdfStreamRow> implements Cloneable {
  public static final byte OPTIONS = 1;

  public static final byte TRIPLE = 2;

  public static final byte QUAD = 3;

  public static final byte GRAPH_START = 4;

  public static final byte GRAPH_END = 5;

  public static final byte NAMESPACE = 6;

  public static final byte NAME = 9;

  public static final byte PREFIX = 10;

  public static final byte DATATYPE = 11;

  /**
   * <code>oneof row { ... }</code>
   */
  private Object row = null;

  private byte rowNumber = 0;

  private RdfStreamRow() {
  }

  /**
   * @return a new empty instance of {@code RdfStreamRow}
   */
  public static RdfStreamRow newInstance() {
    return new RdfStreamRow();
  }

  public boolean hasRow() {
    return rowNumber != 0;
  }

  /**
   * Low-level setter for the <code>row</code> oneof field.
   * Use with care, as it will not check the type of the value.
   */
  public RdfStreamRow setRow(Object row, byte number) {
    this.row = row;
    this.rowNumber = number;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   */
  public Object getRow() {
    return row;
  }

  /**
   * Returns the set field number of the <code>row</code> oneof field.
   */
  public byte getRowFieldNumber() {
    return rowNumber;
  }

  /**
   * Sets the <code>row</code> oneof field to options.
   */
  public RdfStreamRow setOptions(RdfStreamOptions options) {
    this.row = options;
    this.rowNumber = 1;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfStreamOptions getOptions() {
    return (RdfStreamOptions) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to options.
   */
  public boolean hasOptions() {
    return rowNumber == 1;
  }

  /**
   * Sets the <code>row</code> oneof field to triple.
   */
  public RdfStreamRow setTriple(RdfTriple triple) {
    this.row = triple;
    this.rowNumber = 2;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfTriple getTriple() {
    return (RdfTriple) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to triple.
   */
  public boolean hasTriple() {
    return rowNumber == 2;
  }

  /**
   * Sets the <code>row</code> oneof field to quad.
   */
  public RdfStreamRow setQuad(RdfQuad quad) {
    this.row = quad;
    this.rowNumber = 3;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfQuad getQuad() {
    return (RdfQuad) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to quad.
   */
  public boolean hasQuad() {
    return rowNumber == 3;
  }

  /**
   * Sets the <code>row</code> oneof field to graphStart.
   */
  public RdfStreamRow setGraphStart(RdfGraphStart graphStart) {
    this.row = graphStart;
    this.rowNumber = 4;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfGraphStart getGraphStart() {
    return (RdfGraphStart) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to graphStart.
   */
  public boolean hasGraphStart() {
    return rowNumber == 4;
  }

  /**
   * Sets the <code>row</code> oneof field to graphEnd.
   */
  public RdfStreamRow setGraphEnd(RdfGraphEnd graphEnd) {
    this.row = graphEnd;
    this.rowNumber = 5;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfGraphEnd getGraphEnd() {
    return (RdfGraphEnd) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to graphEnd.
   */
  public boolean hasGraphEnd() {
    return rowNumber == 5;
  }

  /**
   * Sets the <code>row</code> oneof field to namespace.
   */
  public RdfStreamRow setNamespace(RdfNamespaceDeclaration namespace) {
    this.row = namespace;
    this.rowNumber = 6;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfNamespaceDeclaration getNamespace() {
    return (RdfNamespaceDeclaration) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to namespace.
   */
  public boolean hasNamespace() {
    return rowNumber == 6;
  }

  /**
   * Sets the <code>row</code> oneof field to name.
   */
  public RdfStreamRow setName(RdfNameEntry name) {
    this.row = name;
    this.rowNumber = 9;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfNameEntry getName() {
    return (RdfNameEntry) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to name.
   */
  public boolean hasName() {
    return rowNumber == 9;
  }

  /**
   * Sets the <code>row</code> oneof field to prefix.
   */
  public RdfStreamRow setPrefix(RdfPrefixEntry prefix) {
    this.row = prefix;
    this.rowNumber = 10;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfPrefixEntry getPrefix() {
    return (RdfPrefixEntry) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to prefix.
   */
  public boolean hasPrefix() {
    return rowNumber == 10;
  }

  /**
   * Sets the <code>row</code> oneof field to datatype.
   */
  public RdfStreamRow setDatatype(RdfDatatypeEntry datatype) {
    this.row = datatype;
    this.rowNumber = 11;
    return this;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfDatatypeEntry getDatatype() {
    return (RdfDatatypeEntry) row;
  }

  /**
   * Checks if the <code>row</code> oneof is set to datatype.
   */
  public boolean hasDatatype() {
    return rowNumber == 11;
  }

  @Override
  public RdfStreamRow copyFrom(final RdfStreamRow other) {
    cachedSize = other.cachedSize;
    this.row = other.row;
    this.rowNumber = other.rowNumber;
    return this;
  }

  @Override
  public RdfStreamRow mergeFrom(final RdfStreamRow other) {
    cachedSize = -1;
    this.row = other.row;
    this.rowNumber = other.rowNumber;
    return this;
  }

  @Override
  public RdfStreamRow clear() {
    cachedSize = -1;
    this.row = null;
    this.rowNumber = 0;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfStreamRow)) {
      return false;
    }
    RdfStreamRow other = (RdfStreamRow) o;
    return rowNumber == other.rowNumber && (rowNumber == 0 || row.equals(other.row));
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    switch (rowNumber) {
      case 1: {
        final var options = getOptions();
        output.writeRawByte((byte) 10);
        output.writeUInt32NoTag(options.getCachedSize());
        options.writeTo(output);
        break;
      }
      case 2: {
        final var triple = getTriple();
        output.writeRawByte((byte) 18);
        output.writeUInt32NoTag(triple.getCachedSize());
        triple.writeTo(output);
        break;
      }
      case 3: {
        final var quad = getQuad();
        output.writeRawByte((byte) 26);
        output.writeUInt32NoTag(quad.getCachedSize());
        quad.writeTo(output);
        break;
      }
      case 4: {
        final var graphStart = getGraphStart();
        output.writeRawByte((byte) 34);
        output.writeUInt32NoTag(graphStart.getCachedSize());
        graphStart.writeTo(output);
        break;
      }
      case 5: {
        final var graphEnd = getGraphEnd();
        output.writeRawByte((byte) 42);
        output.writeUInt32NoTag(graphEnd.getCachedSize());
        graphEnd.writeTo(output);
        break;
      }
      case 6: {
        final var namespace = getNamespace();
        output.writeRawByte((byte) 50);
        output.writeUInt32NoTag(namespace.getCachedSize());
        namespace.writeTo(output);
        break;
      }
      case 9: {
        final var name = getName();
        output.writeRawByte((byte) 74);
        output.writeUInt32NoTag(name.getCachedSize());
        name.writeTo(output);
        break;
      }
      case 10: {
        final var prefix = getPrefix();
        output.writeRawByte((byte) 82);
        output.writeUInt32NoTag(prefix.getCachedSize());
        prefix.writeTo(output);
        break;
      }
      case 11: {
        final var datatype = getDatatype();
        output.writeRawByte((byte) 90);
        output.writeUInt32NoTag(datatype.getCachedSize());
        datatype.writeTo(output);
        break;
      }
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    switch (rowNumber) {
      case 1: {
        final var options = getOptions();
        final int dataSize = options.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 2: {
        final var triple = getTriple();
        final int dataSize = triple.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 3: {
        final var quad = getQuad();
        final int dataSize = quad.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 4: {
        final var graphStart = getGraphStart();
        final int dataSize = graphStart.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 5: {
        final var graphEnd = getGraphEnd();
        final int dataSize = graphEnd.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 6: {
        final var namespace = getNamespace();
        final int dataSize = namespace.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 9: {
        final var name = getName();
        final int dataSize = name.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 10: {
        final var prefix = getPrefix();
        final int dataSize = prefix.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 11: {
        final var datatype = getDatatype();
        final int dataSize = datatype.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfStreamRow mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    final CodedInputStream input = inputLimited.in();
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 10: {
          // options
          final RdfStreamOptions options;
          if (rowNumber == 1) {
            options = getOptions();
          }
          else {
            options = RdfStreamOptions.newInstance();
            setOptions(options);
          }
          ProtoMessage.mergeDelimitedFrom(options, inputLimited);
          tag = input.readTag();
          if (tag != 18) {
            break;
          }
        }
        case 18: {
          // triple
          final RdfTriple triple;
          if (rowNumber == 2) {
            triple = getTriple();
          }
          else {
            triple = RdfTriple.newInstance();
            setTriple(triple);
          }
          ProtoMessage.mergeDelimitedFrom(triple, inputLimited);
          tag = input.readTag();
          if (tag != 26) {
            break;
          }
        }
        case 26: {
          // quad
          final RdfQuad quad;
          if (rowNumber == 3) {
            quad = getQuad();
          }
          else {
            quad = RdfQuad.newInstance();
            setQuad(quad);
          }
          ProtoMessage.mergeDelimitedFrom(quad, inputLimited);
          tag = input.readTag();
          if (tag != 34) {
            break;
          }
        }
        case 34: {
          // graphStart
          final RdfGraphStart graphStart;
          if (rowNumber == 4) {
            graphStart = getGraphStart();
          }
          else {
            graphStart = RdfGraphStart.newInstance();
            setGraphStart(graphStart);
          }
          ProtoMessage.mergeDelimitedFrom(graphStart, inputLimited);
          tag = input.readTag();
          if (tag != 42) {
            break;
          }
        }
        case 42: {
          // graphEnd
          final RdfGraphEnd graphEnd;
          if (rowNumber == 5) {
            graphEnd = getGraphEnd();
          }
          else {
            graphEnd = RdfGraphEnd.newInstance();
            setGraphEnd(graphEnd);
          }
          ProtoMessage.mergeDelimitedFrom(graphEnd, inputLimited);
          tag = input.readTag();
          if (tag != 50) {
            break;
          }
        }
        case 50: {
          // namespace
          final RdfNamespaceDeclaration namespace;
          if (rowNumber == 6) {
            namespace = getNamespace();
          }
          else {
            namespace = RdfNamespaceDeclaration.newInstance();
            setNamespace(namespace);
          }
          ProtoMessage.mergeDelimitedFrom(namespace, inputLimited);
          tag = input.readTag();
          if (tag != 74) {
            break;
          }
        }
        case 74: {
          // name
          final RdfNameEntry name;
          if (rowNumber == 9) {
            name = getName();
          }
          else {
            name = RdfNameEntry.newInstance();
            setName(name);
          }
          ProtoMessage.mergeDelimitedFrom(name, inputLimited);
          tag = input.readTag();
          if (tag != 82) {
            break;
          }
        }
        case 82: {
          // prefix
          final RdfPrefixEntry prefix;
          if (rowNumber == 10) {
            prefix = getPrefix();
          }
          else {
            prefix = RdfPrefixEntry.newInstance();
            setPrefix(prefix);
          }
          ProtoMessage.mergeDelimitedFrom(prefix, inputLimited);
          tag = input.readTag();
          if (tag != 90) {
            break;
          }
        }
        case 90: {
          // datatype
          final RdfDatatypeEntry datatype;
          if (rowNumber == 11) {
            datatype = getDatatype();
          }
          else {
            datatype = RdfDatatypeEntry.newInstance();
            setDatatype(datatype);
          }
          ProtoMessage.mergeDelimitedFrom(datatype, inputLimited);
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfStreamRow clone() {
    return new RdfStreamRow().copyFrom(this);
  }

  public static RdfStreamRow parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfStreamRow(), data).checkInitialized();
  }

  public static RdfStreamRow parseFrom(final LimitedCodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfStreamRow(), input).checkInitialized();
  }

  public static RdfStreamRow parseDelimitedFrom(final InputStream input) throws IOException {
    return ProtoMessage.parseDelimitedFrom(input, RdfStreamRow.getFactory());
  }

  /**
   * @return factory for creating RdfStreamRow messages
   */
  public static MessageFactory<RdfStreamRow> getFactory() {
    return RdfStreamRowFactory.INSTANCE;
  }

  private enum RdfStreamRowFactory implements MessageFactory<RdfStreamRow> {
    INSTANCE;

    @Override
    public RdfStreamRow create() {
      return RdfStreamRow.newInstance();
    }
  }
}
