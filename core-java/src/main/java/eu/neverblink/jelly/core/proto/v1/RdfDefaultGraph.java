// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;

import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfDefaultGraph}
 */
@SuppressWarnings("hiding")
public final class RdfDefaultGraph extends ProtoMessage<RdfDefaultGraph> implements Cloneable {
  private RdfDefaultGraph() {
  }

  /**
   * @return a new empty instance of {@code RdfDefaultGraph}
   */
  public static RdfDefaultGraph newInstance() {
    return new RdfDefaultGraph();
  }

  @Override
  public RdfDefaultGraph copyFrom(final RdfDefaultGraph other) {
    cachedSize = other.cachedSize;
    return this;
  }

  @Override
  public RdfDefaultGraph mergeFrom(final RdfDefaultGraph other) {
    cachedSize = -1;
    return this;
  }

  @Override
  public RdfDefaultGraph clear() {
    cachedSize = -1;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfDefaultGraph)) {
      return false;
    }
    RdfDefaultGraph other = (RdfDefaultGraph) o;
    return true;
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfDefaultGraph mergeFrom(final CodedInputStream input) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfDefaultGraph clone() {
    return new RdfDefaultGraph().copyFrom(this);
  }

  public static RdfDefaultGraph parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfDefaultGraph(), data).checkInitialized();
  }

  public static RdfDefaultGraph parseFrom(final CodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfDefaultGraph(), input).checkInitialized();
  }

  public static RdfDefaultGraph parseDelimitedFrom(final InputStream input) throws IOException {
    return ProtoMessage.parseDelimitedFrom(input, RdfDefaultGraph.getFactory());
  }

  /**
   * @return factory for creating RdfDefaultGraph messages
   */
  public static MessageFactory<RdfDefaultGraph> getFactory() {
    return RdfDefaultGraphFactory.INSTANCE;
  }

  private enum RdfDefaultGraphFactory implements MessageFactory<RdfDefaultGraph> {
    INSTANCE;

    @Override
    public RdfDefaultGraph create() {
      return RdfDefaultGraph.newInstance();
    }
  }
}
