// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.LimitedCodedInputStream;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * Protobuf type {@code RdfStreamFrame}
 */
@SuppressWarnings("hiding")
public final class RdfStreamFrame extends ProtoMessage<RdfStreamFrame> implements Cloneable {

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamRow rows = 1;</code>
     */
    private final List<RdfStreamRow> rows = new ArrayList<>();

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamFrame.MetadataEntry metadata = 15;</code>
     */
    private final List<MetadataEntry> metadata = new ArrayList<>();

    private RdfStreamFrame() {}

    /**
     * @return a new empty instance of {@code RdfStreamFrame}
     */
    public static RdfStreamFrame newInstance() {
        return new RdfStreamFrame();
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamRow rows = 1;</code>
     * @return this
     */
    public RdfStreamFrame clearRows() {
        rows.clear();
        return this;
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamRow rows = 1;</code>
     *
     * @return value for this field
     */
    public List<RdfStreamRow> getRows() {
        return rows;
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamRow rows = 1;</code>
     * @param value the rows to add
     * @return this
     */
    public RdfStreamFrame addRows(final RdfStreamRow value) {
        rows.add(value);
        return this;
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamFrame.MetadataEntry metadata = 15;</code>
     * @return this
     */
    public RdfStreamFrame clearMetadata() {
        metadata.clear();
        return this;
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamFrame.MetadataEntry metadata = 15;</code>
     *
     * @return value for this field
     */
    public List<MetadataEntry> getMetadata() {
        return metadata;
    }

    /**
     * <code>repeated .eu.neverblink.jelly.core.proto.v1.RdfStreamFrame.MetadataEntry metadata = 15;</code>
     * @param value the metadata to add
     * @return this
     */
    public RdfStreamFrame addMetadata(final MetadataEntry value) {
        metadata.add(value);
        return this;
    }

    @Override
    public RdfStreamFrame copyFrom(final RdfStreamFrame other) {
        cachedSize = other.cachedSize;
        rows.clear();
        rows.addAll(other.rows);
        metadata.clear();
        metadata.addAll(other.metadata);
        return this;
    }

    @Override
    public RdfStreamFrame mergeFrom(final RdfStreamFrame other) {
        cachedSize = -1;
        getRows().addAll(other.rows);
        getMetadata().addAll(other.metadata);
        return this;
    }

    @Override
    public RdfStreamFrame clear() {
        cachedSize = -1;
        rows.clear();
        metadata.clear();
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof RdfStreamFrame)) {
            return false;
        }
        RdfStreamFrame other = (RdfStreamFrame) o;
        return rows.equals(other.rows) && metadata.equals(other.metadata);
    }

    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (!rows.isEmpty()) {
            for (final var _field : rows) {
                output.writeRawByte((byte) 10);
                output.writeUInt32NoTag(_field.getCachedSize());
                _field.writeTo(output);
            }
        }
        if (!metadata.isEmpty()) {
            for (final var _field : metadata) {
                output.writeRawByte((byte) 122);
                output.writeUInt32NoTag(_field.getCachedSize());
                _field.writeTo(output);
            }
        }
    }

    @Override
    protected int computeSerializedSize() {
        int size = 0;
        if (!rows.isEmpty()) {
            size += rows.size() + ProtoMessage.computeRepeatedMessageSizeNoTag(rows);
        }
        if (!metadata.isEmpty()) {
            size += metadata.size() + ProtoMessage.computeRepeatedMessageSizeNoTag(metadata);
        }
        return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RdfStreamFrame mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
        // Enabled Fall-Through Optimization (Quickbuf)
        final CodedInputStream input = inputLimited.in();
        int tag = input.readTag();
        while (true) {
            switch (tag) {
                case 10: {
                    // rows
                    tag = ProtoMessage.readRepeatedMessage(rows, RdfStreamRow.getFactory(), inputLimited, tag);
                    if (tag != 122) {
                        break;
                    }
                }
                case 122: {
                    // metadata
                    tag = ProtoMessage.readRepeatedMessage(metadata, MetadataEntry.getFactory(), inputLimited, tag);
                    if (tag != 0) {
                        break;
                    }
                }
                case 0: {
                    return this;
                }
                default: {
                    if (!input.skipField(tag)) {
                        return this;
                    }
                    tag = input.readTag();
                    break;
                }
            }
        }
    }

    @Override
    public RdfStreamFrame clone() {
        return new RdfStreamFrame().copyFrom(this);
    }

    public static RdfStreamFrame parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new RdfStreamFrame(), data).checkInitialized();
    }

    public static RdfStreamFrame parseFrom(final LimitedCodedInputStream input) throws IOException {
        return ProtoMessage.mergeFrom(new RdfStreamFrame(), input).checkInitialized();
    }

    public static RdfStreamFrame parseDelimitedFrom(final InputStream input) throws IOException {
        return ProtoMessage.parseDelimitedFrom(input, RdfStreamFrame.getFactory());
    }

    /**
     * @return factory for creating RdfStreamFrame messages
     */
    public static MessageFactory<RdfStreamFrame> getFactory() {
        return RdfStreamFrameFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code MetadataEntry}
     */
    public static final class MetadataEntry extends ProtoMessage<MetadataEntry> implements Cloneable {

        /**
         * <code>optional string key = 1;</code>
         */
        private String key = "";

        /**
         * <code>optional bytes value = 2;</code>
         */
        private ByteString value_ = ByteString.EMPTY;

        private MetadataEntry() {}

        /**
         * @return a new empty instance of {@code MetadataEntry}
         */
        public static MetadataEntry newInstance() {
            return new MetadataEntry();
        }

        /**
         * <code>optional string key = 1;</code>
         * @return this
         */
        public MetadataEntry clearKey() {
            key = "";
            return this;
        }

        /**
         * <code>optional string key = 1;</code>
         * @return the key
         */
        public String getKey() {
            return key;
        }

        /**
         * <code>optional string key = 1;</code>
         * @param value the key to set
         * @return this
         */
        public MetadataEntry setKey(final String value) {
            key = value;
            return this;
        }

        /**
         * <code>optional bytes value = 2;</code>
         * @return this
         */
        public MetadataEntry clearValue() {
            value_ = ByteString.EMPTY;
            return this;
        }

        /**
         * <code>optional bytes value = 2;</code>
         *
         * @return value for this field
         */
        public ByteString getValue() {
            return value_;
        }

        /**
         * <code>optional bytes value = 2;</code>
         * @param values the value_ to set
         * @return this
         */
        public MetadataEntry setValue(final ByteString values) {
            value_ = values;
            return this;
        }

        @Override
        public MetadataEntry copyFrom(final MetadataEntry other) {
            cachedSize = other.cachedSize;
            key = other.key;
            value_ = other.value_;
            return this;
        }

        @Override
        public MetadataEntry mergeFrom(final MetadataEntry other) {
            cachedSize = -1;
            key = other.key;
            value_ = other.value_;
            return this;
        }

        @Override
        public MetadataEntry clear() {
            cachedSize = -1;
            key = "";
            value_ = ByteString.EMPTY;
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (!(o instanceof MetadataEntry)) {
                return false;
            }
            MetadataEntry other = (MetadataEntry) o;
            return key.equals(other.key) && value_.equals(other.value_);
        }

        @Override
        public void writeTo(final CodedOutputStream output) throws IOException {
            if (!key.isEmpty()) {
                output.writeRawByte((byte) 10);
                output.writeStringNoTag(key);
            }
            if (value_.size() > 0) {
                output.writeRawByte((byte) 18);
                output.writeBytesNoTag(value_);
            }
        }

        @Override
        protected int computeSerializedSize() {
            int size = 0;
            if (!key.isEmpty()) {
                size += 1 + CodedOutputStream.computeStringSizeNoTag(key);
            }
            if (value_.size() > 0) {
                size += 1 + CodedOutputStream.computeBytesSizeNoTag(value_);
            }
            return size;
        }

        @Override
        @SuppressWarnings("fallthrough")
        public MetadataEntry mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
            // Enabled Fall-Through Optimization (Quickbuf)
            final CodedInputStream input = inputLimited.in();
            int tag = input.readTag();
            while (true) {
                switch (tag) {
                    case 10: {
                        // key
                        key = input.readStringRequireUtf8();
                        tag = input.readTag();
                        if (tag != 18) {
                            break;
                        }
                    }
                    case 18: {
                        // value_
                        value_ = input.readBytes();
                        tag = input.readTag();
                        if (tag != 0) {
                            break;
                        }
                    }
                    case 0: {
                        return this;
                    }
                    default: {
                        if (!input.skipField(tag)) {
                            return this;
                        }
                        tag = input.readTag();
                        break;
                    }
                }
            }
        }

        @Override
        public MetadataEntry clone() {
            return new MetadataEntry().copyFrom(this);
        }

        public static MetadataEntry parseFrom(final byte[] data) throws InvalidProtocolBufferException {
            return ProtoMessage.mergeFrom(new MetadataEntry(), data).checkInitialized();
        }

        public static MetadataEntry parseFrom(final LimitedCodedInputStream input) throws IOException {
            return ProtoMessage.mergeFrom(new MetadataEntry(), input).checkInitialized();
        }

        public static MetadataEntry parseDelimitedFrom(final InputStream input) throws IOException {
            return ProtoMessage.parseDelimitedFrom(input, MetadataEntry.getFactory());
        }

        /**
         * @return factory for creating MetadataEntry messages
         */
        public static MessageFactory<MetadataEntry> getFactory() {
            return MetadataEntryFactory.INSTANCE;
        }

        private enum MetadataEntryFactory implements MessageFactory<MetadataEntry> {
            INSTANCE;

            @Override
            public MetadataEntry create() {
                return MetadataEntry.newInstance();
            }
        }
    }

    private enum RdfStreamFrameFactory implements MessageFactory<RdfStreamFrame> {
        INSTANCE;

        @Override
        public RdfStreamFrame create() {
            return RdfStreamFrame.newInstance();
        }
    }
}
