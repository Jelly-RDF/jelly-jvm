// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import eu.neverblink.protoc.java.runtime.ProtoEnum;

/**
 * Protobuf enum {@code PhysicalStreamType}
 */
public enum PhysicalStreamType implements ProtoEnum<PhysicalStreamType> {
  /**
   * <code>UNSPECIFIED = 0;</code>
   */
  UNSPECIFIED("UNSPECIFIED", 0),

  /**
   * <code>TRIPLES = 1;</code>
   */
  TRIPLES("TRIPLES", 1),

  /**
   * <code>QUADS = 2;</code>
   */
  QUADS("QUADS", 2),

  /**
   * <code>GRAPHS = 3;</code>
   */
  GRAPHS("GRAPHS", 3);

  /**
   * <code>UNSPECIFIED = 0;</code>
   */
  public static final int UNSPECIFIED_VALUE = 0;

  /**
   * <code>TRIPLES = 1;</code>
   */
  public static final int TRIPLES_VALUE = 1;

  /**
   * <code>QUADS = 2;</code>
   */
  public static final int QUADS_VALUE = 2;

  /**
   * <code>GRAPHS = 3;</code>
   */
  public static final int GRAPHS_VALUE = 3;

  private final String name;

  private final int number;

  private PhysicalStreamType(String name, int number) {
    this.name = name;
    this.number = number;
  }

  /**
   * @return the string representation of enum entry
   */
  @Override
  public String getName() {
    return name;
  }

  /**
   * @return the numeric wire value of this enum entry
   */
  @Override
  public int getNumber() {
    return number;
  }

  /**
   * @return a converter that maps between this enum's numeric and text representations
   */
  public static EnumConverter<PhysicalStreamType> converter() {
    return PhysicalStreamTypeConverter.INSTANCE;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value, or null if unknown.
   */
  public static PhysicalStreamType forNumber(int value) {
    return PhysicalStreamTypeConverter.INSTANCE.forNumber(value);
  }

  /**
   * @param number The numeric wire value of the corresponding enum entry.
   * @param other Fallback value in case the value is not known.
   * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
   */
  public static PhysicalStreamType forNumberOr(int number, PhysicalStreamType other) {
    PhysicalStreamType value = forNumber(number);
    return value == null ? other : value;
  }

  enum PhysicalStreamTypeConverter implements EnumConverter<PhysicalStreamType> {
    INSTANCE;

    private static final PhysicalStreamType[] lookup = new PhysicalStreamType[4];

    static {
      lookup[0] = UNSPECIFIED;
      lookup[1] = TRIPLES;
      lookup[2] = QUADS;
      lookup[3] = GRAPHS;
    }

    @Override
    public final PhysicalStreamType forNumber(final int value) {
      if (value >= 0 && value < lookup.length) {
        return lookup[value];
      }
      return null;
    }

    @Override
    public final PhysicalStreamType forName(final CharSequence value) {
      switch (value.length()) {
        case 5: {
          if ("QUADS" == value) {
            return QUADS;
          }
          break;
        }
        case 6: {
          if ("GRAPHS" == value) {
            return GRAPHS;
          }
          break;
        }
        case 7: {
          if ("TRIPLES" == value) {
            return TRIPLES;
          }
          break;
        }
        case 11: {
          if ("UNSPECIFIED" == value) {
            return UNSPECIFIED;
          }
          break;
        }
      }
      return null;
    }
  }
}
