// Code generated by NeverBlink protoc-java-fast. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.jelly.core.internal.proto.SpoBase;
import eu.neverblink.protoc.java.runtime.LimitedCodedInputStream;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;

import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfTriple}
 * DO NOT INHERIT FROM THIS CLASS!
 * It's not <code>final</code> only to facilitate the Mutable nested subclass.
 */
@SuppressWarnings("hiding")
public abstract class RdfTriple extends ProtoMessage<RdfTriple> implements SpoBase, Cloneable {
  public static final byte S_IRI = 1;

  public static final byte S_BNODE = 2;

  public static final byte S_LITERAL = 3;

  public static final byte S_TRIPLE_TERM = 4;

  public static final byte P_IRI = 5;

  public static final byte P_BNODE = 6;

  public static final byte P_LITERAL = 7;

  public static final byte P_TRIPLE_TERM = 8;

  public static final byte O_IRI = 9;

  public static final byte O_BNODE = 10;

  public static final byte O_LITERAL = 11;

  public static final byte O_TRIPLE_TERM = 12;

  /**
   * <code>oneof subject { ... }</code>
   */
  protected Object subject = null;

  protected byte subjectNumber = 0;

  /**
   * <code>oneof predicate { ... }</code>
   */
  protected Object predicate = null;

  protected byte predicateNumber = 0;

  /**
   * <code>oneof object { ... }</code>
   */
  protected Object object = null;

  protected byte objectNumber = 0;

  /**
   * @return a new empty instance of {@code Mutable}
   */
  public static Mutable newInstance() {
    return new Mutable();
  }

  public boolean hasSubject() {
    return subjectNumber != 0;
  }

  /**
   * Returns the <code>subject</code> oneof field.
   */
  public Object getSubject() {
    return subject;
  }

  /**
   * Returns the set field number of the <code>subject</code> oneof field.
   */
  public byte getSubjectFieldNumber() {
    return subjectNumber;
  }

  /**
   * Returns the <code>subject</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfIri getSIri() {
    return (RdfIri) subject;
  }

  /**
   * Checks if the <code>subject</code> oneof is set to sIri.
   */
  public boolean hasSIri() {
    return subjectNumber == 1;
  }

  /**
   * Returns the <code>subject</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public String getSBnode() {
    return (String) subject;
  }

  /**
   * Checks if the <code>subject</code> oneof is set to sBnode.
   */
  public boolean hasSBnode() {
    return subjectNumber == 2;
  }

  /**
   * Returns the <code>subject</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfLiteral getSLiteral() {
    return (RdfLiteral) subject;
  }

  /**
   * Checks if the <code>subject</code> oneof is set to sLiteral.
   */
  public boolean hasSLiteral() {
    return subjectNumber == 3;
  }

  /**
   * Returns the <code>subject</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfTriple getSTripleTerm() {
    return (RdfTriple) subject;
  }

  /**
   * Checks if the <code>subject</code> oneof is set to sTripleTerm.
   */
  public boolean hasSTripleTerm() {
    return subjectNumber == 4;
  }

  public boolean hasPredicate() {
    return predicateNumber != 0;
  }

  /**
   * Returns the <code>predicate</code> oneof field.
   */
  public Object getPredicate() {
    return predicate;
  }

  /**
   * Returns the set field number of the <code>predicate</code> oneof field.
   */
  public byte getPredicateFieldNumber() {
    return predicateNumber;
  }

  /**
   * Returns the <code>predicate</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfIri getPIri() {
    return (RdfIri) predicate;
  }

  /**
   * Checks if the <code>predicate</code> oneof is set to pIri.
   */
  public boolean hasPIri() {
    return predicateNumber == 5;
  }

  /**
   * Returns the <code>predicate</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public String getPBnode() {
    return (String) predicate;
  }

  /**
   * Checks if the <code>predicate</code> oneof is set to pBnode.
   */
  public boolean hasPBnode() {
    return predicateNumber == 6;
  }

  /**
   * Returns the <code>predicate</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfLiteral getPLiteral() {
    return (RdfLiteral) predicate;
  }

  /**
   * Checks if the <code>predicate</code> oneof is set to pLiteral.
   */
  public boolean hasPLiteral() {
    return predicateNumber == 7;
  }

  /**
   * Returns the <code>predicate</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfTriple getPTripleTerm() {
    return (RdfTriple) predicate;
  }

  /**
   * Checks if the <code>predicate</code> oneof is set to pTripleTerm.
   */
  public boolean hasPTripleTerm() {
    return predicateNumber == 8;
  }

  public boolean hasObject() {
    return objectNumber != 0;
  }

  /**
   * Returns the <code>object</code> oneof field.
   */
  public Object getObject() {
    return object;
  }

  /**
   * Returns the set field number of the <code>object</code> oneof field.
   */
  public byte getObjectFieldNumber() {
    return objectNumber;
  }

  /**
   * Returns the <code>object</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfIri getOIri() {
    return (RdfIri) object;
  }

  /**
   * Checks if the <code>object</code> oneof is set to oIri.
   */
  public boolean hasOIri() {
    return objectNumber == 9;
  }

  /**
   * Returns the <code>object</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public String getOBnode() {
    return (String) object;
  }

  /**
   * Checks if the <code>object</code> oneof is set to oBnode.
   */
  public boolean hasOBnode() {
    return objectNumber == 10;
  }

  /**
   * Returns the <code>object</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfLiteral getOLiteral() {
    return (RdfLiteral) object;
  }

  /**
   * Checks if the <code>object</code> oneof is set to oLiteral.
   */
  public boolean hasOLiteral() {
    return objectNumber == 11;
  }

  /**
   * Returns the <code>object</code> oneof field.
   * Use with care, as it will not check if the correct field number is actually set.
   */
  public RdfTriple getOTripleTerm() {
    return (RdfTriple) object;
  }

  /**
   * Checks if the <code>object</code> oneof is set to oTripleTerm.
   */
  public boolean hasOTripleTerm() {
    return objectNumber == 12;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfTriple)) {
      return false;
    }
    RdfTriple other = (RdfTriple) o;
    return subjectNumber == other.subjectNumber && (subjectNumber == 0 || subject.equals(other.subject))
      && predicateNumber == other.predicateNumber && (predicateNumber == 0 || predicate.equals(other.predicate))
      && objectNumber == other.objectNumber && (objectNumber == 0 || object.equals(other.object));
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    switch (subjectNumber) {
      case 1: {
        final var sIri = getSIri();
        output.writeRawByte((byte) 10);
        output.writeUInt32NoTag(sIri.getCachedSize());
        sIri.writeTo(output);
        break;
      }
      case 2: {
        final var sBnode = getSBnode();
        output.writeRawByte((byte) 18);
        output.writeStringNoTag(sBnode);
        break;
      }
      case 3: {
        final var sLiteral = getSLiteral();
        output.writeRawByte((byte) 26);
        output.writeUInt32NoTag(sLiteral.getCachedSize());
        sLiteral.writeTo(output);
        break;
      }
      case 4: {
        final var sTripleTerm = getSTripleTerm();
        output.writeRawByte((byte) 34);
        output.writeUInt32NoTag(sTripleTerm.getCachedSize());
        sTripleTerm.writeTo(output);
        break;
      }
    }
    switch (predicateNumber) {
      case 5: {
        final var pIri = getPIri();
        output.writeRawByte((byte) 42);
        output.writeUInt32NoTag(pIri.getCachedSize());
        pIri.writeTo(output);
        break;
      }
      case 6: {
        final var pBnode = getPBnode();
        output.writeRawByte((byte) 50);
        output.writeStringNoTag(pBnode);
        break;
      }
      case 7: {
        final var pLiteral = getPLiteral();
        output.writeRawByte((byte) 58);
        output.writeUInt32NoTag(pLiteral.getCachedSize());
        pLiteral.writeTo(output);
        break;
      }
      case 8: {
        final var pTripleTerm = getPTripleTerm();
        output.writeRawByte((byte) 66);
        output.writeUInt32NoTag(pTripleTerm.getCachedSize());
        pTripleTerm.writeTo(output);
        break;
      }
    }
    switch (objectNumber) {
      case 9: {
        final var oIri = getOIri();
        output.writeRawByte((byte) 74);
        output.writeUInt32NoTag(oIri.getCachedSize());
        oIri.writeTo(output);
        break;
      }
      case 10: {
        final var oBnode = getOBnode();
        output.writeRawByte((byte) 82);
        output.writeStringNoTag(oBnode);
        break;
      }
      case 11: {
        final var oLiteral = getOLiteral();
        output.writeRawByte((byte) 90);
        output.writeUInt32NoTag(oLiteral.getCachedSize());
        oLiteral.writeTo(output);
        break;
      }
      case 12: {
        final var oTripleTerm = getOTripleTerm();
        output.writeRawByte((byte) 98);
        output.writeUInt32NoTag(oTripleTerm.getCachedSize());
        oTripleTerm.writeTo(output);
        break;
      }
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    switch (subjectNumber) {
      case 1: {
        final var sIri = getSIri();
        final int dataSize = sIri.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 2: {
        final var sBnode = getSBnode();
        size += 1 + CodedOutputStream.computeStringSizeNoTag(sBnode);
        break;
      }
      case 3: {
        final var sLiteral = getSLiteral();
        final int dataSize = sLiteral.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 4: {
        final var sTripleTerm = getSTripleTerm();
        final int dataSize = sTripleTerm.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
    }
    switch (predicateNumber) {
      case 5: {
        final var pIri = getPIri();
        final int dataSize = pIri.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 6: {
        final var pBnode = getPBnode();
        size += 1 + CodedOutputStream.computeStringSizeNoTag(pBnode);
        break;
      }
      case 7: {
        final var pLiteral = getPLiteral();
        final int dataSize = pLiteral.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 8: {
        final var pTripleTerm = getPTripleTerm();
        final int dataSize = pTripleTerm.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
    }
    switch (objectNumber) {
      case 9: {
        final var oIri = getOIri();
        final int dataSize = oIri.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 10: {
        final var oBnode = getOBnode();
        size += 1 + CodedOutputStream.computeStringSizeNoTag(oBnode);
        break;
      }
      case 11: {
        final var oLiteral = getOLiteral();
        final int dataSize = oLiteral.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
      case 12: {
        final var oTripleTerm = getOTripleTerm();
        final int dataSize = oTripleTerm.getSerializedSize();
        size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        break;
      }
    }
    return size;
  }

  @Override
  public Mutable clone() {
    return newInstance().copyFrom(this);
  }

  public static RdfTriple parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(newInstance(), data);
  }

  public static RdfTriple parseFrom(final LimitedCodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(newInstance(), input);
  }

  public static RdfTriple parseDelimitedFrom(final InputStream input) throws IOException {
    return ProtoMessage.parseDelimitedFrom(input, RdfTriple.getFactory());
  }

  /**
   * @return factory for creating RdfTriple messages
   */
  public static MessageFactory<RdfTriple> getFactory() {
    return RdfTripleFactory.INSTANCE;
  }

  /**
   * @return this type's descriptor.
   */
  public static Descriptors.Descriptor getDescriptor() {
    return Rdf.eu_ostrzyciel_jelly_core_proto_v1_RdfTriple_descriptor;
  }

  private enum RdfTripleFactory implements MessageFactory<RdfTriple> {
    INSTANCE;

    @Override
    public RdfTriple create() {
      return RdfTriple.newInstance();
    }
  }

  /**
   * Mutable subclass of the parent class.
   * You can call setters on this class to set the values.
   * When passing the constructed message to the serializer,
   * you should use the parent class (using .asImmutable()) to
   * ensure the message won't be modified by accident.
   */
  public static final class Mutable extends RdfTriple implements Setters {
    private Mutable() {
    }

    /**
     * Low-level setter for the <code>subject</code> oneof field.
     * Use with care, as it will not check the type of the value.
     */
    public Mutable setSubject(Object subject, byte number) {
      this.subject = subject;
      this.subjectNumber = number;
      return this;
    }

    /**
     * Sets the <code>subject</code> oneof field to sIri.
     */
    public Mutable setSIri(RdfIri sIri) {
      this.subject = sIri;
      this.subjectNumber = 1;
      return this;
    }

    /**
     * Sets the <code>subject</code> oneof field to sBnode.
     */
    public Mutable setSBnode(String sBnode) {
      this.subject = sBnode;
      this.subjectNumber = 2;
      return this;
    }

    /**
     * Sets the <code>subject</code> oneof field to sLiteral.
     */
    public Mutable setSLiteral(RdfLiteral sLiteral) {
      this.subject = sLiteral;
      this.subjectNumber = 3;
      return this;
    }

    /**
     * Sets the <code>subject</code> oneof field to sTripleTerm.
     */
    public Mutable setSTripleTerm(RdfTriple sTripleTerm) {
      this.subject = sTripleTerm;
      this.subjectNumber = 4;
      return this;
    }

    /**
     * Low-level setter for the <code>predicate</code> oneof field.
     * Use with care, as it will not check the type of the value.
     */
    public Mutable setPredicate(Object predicate, byte number) {
      this.predicate = predicate;
      this.predicateNumber = number;
      return this;
    }

    /**
     * Sets the <code>predicate</code> oneof field to pIri.
     */
    public Mutable setPIri(RdfIri pIri) {
      this.predicate = pIri;
      this.predicateNumber = 5;
      return this;
    }

    /**
     * Sets the <code>predicate</code> oneof field to pBnode.
     */
    public Mutable setPBnode(String pBnode) {
      this.predicate = pBnode;
      this.predicateNumber = 6;
      return this;
    }

    /**
     * Sets the <code>predicate</code> oneof field to pLiteral.
     */
    public Mutable setPLiteral(RdfLiteral pLiteral) {
      this.predicate = pLiteral;
      this.predicateNumber = 7;
      return this;
    }

    /**
     * Sets the <code>predicate</code> oneof field to pTripleTerm.
     */
    public Mutable setPTripleTerm(RdfTriple pTripleTerm) {
      this.predicate = pTripleTerm;
      this.predicateNumber = 8;
      return this;
    }

    /**
     * Low-level setter for the <code>object</code> oneof field.
     * Use with care, as it will not check the type of the value.
     */
    public Mutable setObject(Object object, byte number) {
      this.object = object;
      this.objectNumber = number;
      return this;
    }

    /**
     * Sets the <code>object</code> oneof field to oIri.
     */
    public Mutable setOIri(RdfIri oIri) {
      this.object = oIri;
      this.objectNumber = 9;
      return this;
    }

    /**
     * Sets the <code>object</code> oneof field to oBnode.
     */
    public Mutable setOBnode(String oBnode) {
      this.object = oBnode;
      this.objectNumber = 10;
      return this;
    }

    /**
     * Sets the <code>object</code> oneof field to oLiteral.
     */
    public Mutable setOLiteral(RdfLiteral oLiteral) {
      this.object = oLiteral;
      this.objectNumber = 11;
      return this;
    }

    /**
     * Sets the <code>object</code> oneof field to oTripleTerm.
     */
    public Mutable setOTripleTerm(RdfTriple oTripleTerm) {
      this.object = oTripleTerm;
      this.objectNumber = 12;
      return this;
    }

    @Override
    public Mutable copyFrom(final RdfTriple other) {
      cachedSize = other.cachedSize;
      this.subject = other.subject;
      this.subjectNumber = other.subjectNumber;
      this.predicate = other.predicate;
      this.predicateNumber = other.predicateNumber;
      this.object = other.object;
      this.objectNumber = other.objectNumber;
      return this;
    }

    @Override
    public Mutable mergeFrom(final RdfTriple other) {
      cachedSize = -1;
      this.subject = other.subject;
      this.subjectNumber = other.subjectNumber;
      this.predicate = other.predicate;
      this.predicateNumber = other.predicateNumber;
      this.object = other.object;
      this.objectNumber = other.objectNumber;
      return this;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public Mutable mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
      // Enabled Fall-Through Optimization
      final CodedInputStream input = inputLimited.in();
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 10: {
            // sIri
            final RdfIri sIri;
            if (subjectNumber == 1) {
              sIri = getSIri();
            }
            else {
              sIri = RdfIri.newInstance();
              setSIri(sIri);
            }
            ProtoMessage.mergeDelimitedFrom(sIri, inputLimited);
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // pIri
            final RdfIri pIri;
            if (predicateNumber == 5) {
              pIri = getPIri();
            }
            else {
              pIri = RdfIri.newInstance();
              setPIri(pIri);
            }
            ProtoMessage.mergeDelimitedFrom(pIri, inputLimited);
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // oIri
            final RdfIri oIri;
            if (objectNumber == 9) {
              oIri = getOIri();
            }
            else {
              oIri = RdfIri.newInstance();
              setOIri(oIri);
            }
            ProtoMessage.mergeDelimitedFrom(oIri, inputLimited);
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // sBnode
            setSBnode(input.readStringRequireUtf8());
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // pBnode
            setPBnode(input.readStringRequireUtf8());
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // oBnode
            setOBnode(input.readStringRequireUtf8());
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // sLiteral
            final RdfLiteral sLiteral;
            if (subjectNumber == 3) {
              sLiteral = getSLiteral();
            }
            else {
              sLiteral = RdfLiteral.newInstance();
              setSLiteral(sLiteral);
            }
            ProtoMessage.mergeDelimitedFrom(sLiteral, inputLimited);
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // pLiteral
            final RdfLiteral pLiteral;
            if (predicateNumber == 7) {
              pLiteral = getPLiteral();
            }
            else {
              pLiteral = RdfLiteral.newInstance();
              setPLiteral(pLiteral);
            }
            ProtoMessage.mergeDelimitedFrom(pLiteral, inputLimited);
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // oLiteral
            final RdfLiteral oLiteral;
            if (objectNumber == 11) {
              oLiteral = getOLiteral();
            }
            else {
              oLiteral = RdfLiteral.newInstance();
              setOLiteral(oLiteral);
            }
            ProtoMessage.mergeDelimitedFrom(oLiteral, inputLimited);
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // sTripleTerm
            final RdfTriple sTripleTerm;
            if (subjectNumber == 4) {
              sTripleTerm = getSTripleTerm();
            }
            else {
              sTripleTerm = RdfTriple.newInstance();
              setSTripleTerm(sTripleTerm);
            }
            ProtoMessage.mergeDelimitedFrom(sTripleTerm, inputLimited);
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // pTripleTerm
            final RdfTriple pTripleTerm;
            if (predicateNumber == 8) {
              pTripleTerm = getPTripleTerm();
            }
            else {
              pTripleTerm = RdfTriple.newInstance();
              setPTripleTerm(pTripleTerm);
            }
            ProtoMessage.mergeDelimitedFrom(pTripleTerm, inputLimited);
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // oTripleTerm
            final RdfTriple oTripleTerm;
            if (objectNumber == 12) {
              oTripleTerm = getOTripleTerm();
            }
            else {
              oTripleTerm = RdfTriple.newInstance();
              setOTripleTerm(oTripleTerm);
            }
            ProtoMessage.mergeDelimitedFrom(oTripleTerm, inputLimited);
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    /**
     * Returns this message as an immutable message, without any copies.
     */
    public RdfTriple asImmutable() {
      return this;
    }
  }
}
