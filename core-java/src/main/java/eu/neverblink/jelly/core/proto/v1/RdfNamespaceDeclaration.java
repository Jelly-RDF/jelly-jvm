// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.jelly.core.internal.proto.NsBase;
import eu.neverblink.jelly.core.proto.v1.RdfIri;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfNamespaceDeclaration}
 */
@SuppressWarnings("hiding")
public final class RdfNamespaceDeclaration extends ProtoMessage<RdfNamespaceDeclaration> implements Cloneable, NsBase {

    /**
     * <code>optional string name = 1;</code>
     */
    private String name = "";

    /**
     * <code>optional .eu.neverblink.jelly.core.proto.v1.RdfIri value = 2;</code>
     */
    private RdfIri value_ = null;

    private RdfNamespaceDeclaration() {}

    /**
     * @return a new empty instance of {@code RdfNamespaceDeclaration}
     */
    public static RdfNamespaceDeclaration newInstance() {
        return new RdfNamespaceDeclaration();
    }

    /**
     * <code>optional string name = 1;</code>
     * @return this
     */
    public RdfNamespaceDeclaration clearName() {
        name = "";
        return this;
    }

    /**
     * <code>optional string name = 1;</code>
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * <code>optional string name = 1;</code>
     * @param value the name to set
     * @return this
     */
    public RdfNamespaceDeclaration setName(final String value) {
        name = value;
        return this;
    }

    private void initValue() {
        if (value_ == null) {
            value_ = RdfIri.newInstance();
        }
    }

    /**
     * <code>optional .eu.neverblink.jelly.core.proto.v1.RdfIri value = 2;</code>
     * @return this
     */
    public RdfNamespaceDeclaration clearValue() {
        value_ = null;
        return this;
    }

    /**
     * <code>optional .eu.neverblink.jelly.core.proto.v1.RdfIri value = 2;</code>
     *
     * @return value for this field
     */
    public RdfIri getValue() {
        return value_;
    }

    /**
     * <code>optional .eu.neverblink.jelly.core.proto.v1.RdfIri value = 2;</code>
     * @param value the value_ to set
     * @return this
     */
    public RdfNamespaceDeclaration setValue(final RdfIri value) {
        initValue();
        value_.copyFrom(value);
        return this;
    }

    @Override
    public RdfNamespaceDeclaration copyFrom(final RdfNamespaceDeclaration other) {
        cachedSize = other.cachedSize;
        name = other.name;
        initValue();
        value_.copyFrom(other.value_);
        return this;
    }

    @Override
    public RdfNamespaceDeclaration mergeFrom(final RdfNamespaceDeclaration other) {
        cachedSize = -1;
        name = other.name;
        getValue().mergeFrom(other.value_);
        return this;
    }

    @Override
    public RdfNamespaceDeclaration clear() {
        cachedSize = -1;
        name = "";
        value_ = null;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof RdfNamespaceDeclaration)) {
            return false;
        }
        RdfNamespaceDeclaration other = (RdfNamespaceDeclaration) o;
        return name.equals(other.name) && value_.equals(other.value_);
    }

    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (!name.isEmpty()) {
            output.writeRawByte((byte) 10);
            output.writeStringNoTag(name);
        }
        if (value_ != null) {
            output.writeRawByte((byte) 18);
            output.writeUInt32NoTag(value_.getCachedSize());
            value_.writeTo(output);
        }
    }

    @Override
    protected int computeSerializedSize() {
        int size = 0;
        if (!name.isEmpty()) {
            size += 1 + CodedOutputStream.computeStringSizeNoTag(name);
        }
        if (value_ != null) {
            final int dataSize = value_.getSerializedSize();
            size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
        }
        return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RdfNamespaceDeclaration mergeFrom(final CodedInputStream input) throws IOException {
        // Enabled Fall-Through Optimization (Quickbuf)
        int tag = input.readTag();
        while (true) {
            switch (tag) {
                case 10: {
                    // name
                    name = input.readStringRequireUtf8();
                    tag = input.readTag();
                    if (tag != 18) {
                        break;
                    }
                }
                case 18: {
                    // value_
                    initValue();
                    ProtoMessage.mergeDelimitedFrom(value_, input);
                    tag = input.readTag();
                    if (tag != 0) {
                        break;
                    }
                }
                case 0: {
                    return this;
                }
                default: {
                    if (!input.skipField(tag)) {
                        return this;
                    }
                    tag = input.readTag();
                    break;
                }
            }
        }
    }

    @Override
    public RdfNamespaceDeclaration clone() {
        return new RdfNamespaceDeclaration().copyFrom(this);
    }

    public static RdfNamespaceDeclaration parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new RdfNamespaceDeclaration(), data).checkInitialized();
    }

    public static RdfNamespaceDeclaration parseFrom(final CodedInputStream input) throws IOException {
        return ProtoMessage.mergeFrom(new RdfNamespaceDeclaration(), input).checkInitialized();
    }

    public static RdfNamespaceDeclaration parseDelimitedFrom(final InputStream input) throws IOException {
        return ProtoMessage.parseDelimitedFrom(input, RdfNamespaceDeclaration.getFactory());
    }

    /**
     * @return factory for creating RdfNamespaceDeclaration messages
     */
    public static MessageFactory<RdfNamespaceDeclaration> getFactory() {
        return RdfNamespaceDeclarationFactory.INSTANCE;
    }

    private enum RdfNamespaceDeclarationFactory implements MessageFactory<RdfNamespaceDeclaration> {
        INSTANCE;

        @Override
        public RdfNamespaceDeclaration create() {
            return RdfNamespaceDeclaration.newInstance();
        }
    }
}
