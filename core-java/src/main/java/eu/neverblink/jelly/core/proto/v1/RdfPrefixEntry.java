// Code generated by NeverBlink protoc-java-fast. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.LimitedCodedInputStream;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;

import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfPrefixEntry}
 */
@SuppressWarnings("hiding")
public final class RdfPrefixEntry extends ProtoMessage<RdfPrefixEntry> implements Cloneable {
  /**
   * <code>optional uint32 id = 1;</code>
   */
  private int id;

  /**
   * <code>optional string value = 2;</code>
   */
  private String value_ = "";

  private RdfPrefixEntry() {
  }

  /**
   * @return a new empty instance of {@code RdfPrefixEntry}
   */
  public static RdfPrefixEntry newInstance() {
    return new RdfPrefixEntry();
  }

  /**
   * <code>optional uint32 id = 1;</code>
   * @return the id
   */
  public int getId() {
    return id;
  }

  /**
   * <code>optional uint32 id = 1;</code>
   * @param value the id to set
   * @return this
   */
  public RdfPrefixEntry setId(final int value) {
    id = value;
    return this;
  }

  /**
   * <code>optional string value = 2;</code>
   * @return the value_
   */
  public String getValue() {
    return value_;
  }

  /**
   * <code>optional string value = 2;</code>
   * @param value the value_ to set
   * @return this
   */
  public RdfPrefixEntry setValue(final String value) {
    value_ = value;
    return this;
  }

  @Override
  public RdfPrefixEntry copyFrom(final RdfPrefixEntry other) {
    cachedSize = other.cachedSize;
    id = other.id;
    value_ = other.value_;
    return this;
  }

  @Override
  public RdfPrefixEntry mergeFrom(final RdfPrefixEntry other) {
    cachedSize = -1;
    setId(other.id);
    value_ = other.value_;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfPrefixEntry)) {
      return false;
    }
    RdfPrefixEntry other = (RdfPrefixEntry) o;
    return id == other.id
      && value_.equals(other.value_);
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    if (id != 0) {
      output.writeRawByte((byte) 8);
      output.writeUInt32NoTag(id);
    }
    if (!value_.isEmpty()) {
      output.writeRawByte((byte) 18);
      output.writeStringNoTag(value_);
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    if (id != 0) {
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(id);
    }
    if (!value_.isEmpty()) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(value_);
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfPrefixEntry mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
    // Enabled Fall-Through Optimization
    final CodedInputStream input = inputLimited.in();
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 8: {
          // id
          id = input.readUInt32();
          tag = input.readTag();
          if (tag != 18) {
            break;
          }
        }
        case 18: {
          // value_
          value_ = input.readStringRequireUtf8();
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfPrefixEntry clone() {
    return new RdfPrefixEntry().copyFrom(this);
  }

  public static RdfPrefixEntry parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfPrefixEntry(), data);
  }

  public static RdfPrefixEntry parseFrom(final LimitedCodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfPrefixEntry(), input);
  }

  public static RdfPrefixEntry parseDelimitedFrom(final InputStream input) throws IOException {
    return ProtoMessage.parseDelimitedFrom(input, RdfPrefixEntry.getFactory());
  }

  /**
   * @return factory for creating RdfPrefixEntry messages
   */
  public static MessageFactory<RdfPrefixEntry> getFactory() {
    return RdfPrefixEntryFactory.INSTANCE;
  }

  private enum RdfPrefixEntryFactory implements MessageFactory<RdfPrefixEntry> {
    INSTANCE;

    @Override
    public RdfPrefixEntry create() {
      return RdfPrefixEntry.newInstance();
    }
  }
}
