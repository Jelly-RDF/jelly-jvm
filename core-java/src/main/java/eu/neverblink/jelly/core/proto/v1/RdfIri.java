// Code generated by protocol buffer compiler. Do not edit!
package eu.neverblink.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.LimitedCodedInputStream;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;

import java.io.IOException;
import java.io.InputStream;

/**
 * Protobuf type {@code RdfIri}
 */
@SuppressWarnings("hiding")
public final class RdfIri extends ProtoMessage<RdfIri> implements Cloneable {
  /**
   * <code>optional uint32 prefix_id = 1;</code>
   */
  private int prefixId;

  /**
   * <code>optional uint32 name_id = 2;</code>
   */
  private int nameId;

  private RdfIri() {
  }

  /**
   * @return a new empty instance of {@code RdfIri}
   */
  public static RdfIri newInstance() {
    return new RdfIri();
  }

  /**
   * <code>optional uint32 prefix_id = 1;</code>
   * @return this
   */
  public RdfIri clearPrefixId() {
    prefixId = 0;
    return this;
  }

  /**
   * <code>optional uint32 prefix_id = 1;</code>
   * @return the prefixId
   */
  public int getPrefixId() {
    return prefixId;
  }

  /**
   * <code>optional uint32 prefix_id = 1;</code>
   * @param value the prefixId to set
   * @return this
   */
  public RdfIri setPrefixId(final int value) {
    prefixId = value;
    return this;
  }

  /**
   * <code>optional uint32 name_id = 2;</code>
   * @return this
   */
  public RdfIri clearNameId() {
    nameId = 0;
    return this;
  }

  /**
   * <code>optional uint32 name_id = 2;</code>
   * @return the nameId
   */
  public int getNameId() {
    return nameId;
  }

  /**
   * <code>optional uint32 name_id = 2;</code>
   * @param value the nameId to set
   * @return this
   */
  public RdfIri setNameId(final int value) {
    nameId = value;
    return this;
  }

  @Override
  public RdfIri copyFrom(final RdfIri other) {
    cachedSize = other.cachedSize;
    prefixId = other.prefixId;
    nameId = other.nameId;
    return this;
  }

  @Override
  public RdfIri mergeFrom(final RdfIri other) {
    cachedSize = -1;
    setPrefixId(other.prefixId);
    setNameId(other.nameId);
    return this;
  }

  @Override
  public RdfIri clear() {
    cachedSize = -1;
    prefixId = 0;
    nameId = 0;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfIri)) {
      return false;
    }
    RdfIri other = (RdfIri) o;
    return prefixId == other.prefixId
      && nameId == other.nameId;
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    if (prefixId != 0) {
      output.writeRawByte((byte) 8);
      output.writeUInt32NoTag(prefixId);
    }
    if (nameId != 0) {
      output.writeRawByte((byte) 16);
      output.writeUInt32NoTag(nameId);
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    if (prefixId != 0) {
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(prefixId);
    }
    if (nameId != 0) {
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(nameId);
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfIri mergeFrom(final LimitedCodedInputStream inputLimited) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    final CodedInputStream input = inputLimited.in();
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 8: {
          // prefixId
          prefixId = input.readUInt32();
          tag = input.readTag();
          if (tag != 16) {
            break;
          }
        }
        case 16: {
          // nameId
          nameId = input.readUInt32();
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfIri clone() {
    return new RdfIri().copyFrom(this);
  }

  public static RdfIri parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfIri(), data).checkInitialized();
  }

  public static RdfIri parseFrom(final LimitedCodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfIri(), input).checkInitialized();
  }

  public static RdfIri parseDelimitedFrom(final InputStream input) throws IOException {
    return ProtoMessage.parseDelimitedFrom(input, RdfIri.getFactory());
  }

  /**
   * @return factory for creating RdfIri messages
   */
  public static MessageFactory<RdfIri> getFactory() {
    return RdfIriFactory.INSTANCE;
  }

  private enum RdfIriFactory implements MessageFactory<RdfIri> {
    INSTANCE;

    @Override
    public RdfIri create() {
      return RdfIri.newInstance();
    }
  }
}
